# A Makefile for using Google Test and building a unit test program against it.
# CPSC 2150 by Gladys Monagan
# based on the Google Test distribution sample Makefiles
#
# SYNOPSIS:
#   make [all]  - makes everything.
#   make clean  - removes all files generated by make, for Windows
#   make remove - removes all files generated by make, for UNIX/Linux
#   make run    - makes everything and runs the built unit test program, for Windows
#   make check  - makes everything and runs the built unit test program, for UNIX/Linux
#   make test   - make a test main program (no Google Test)

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../..

# Where to find user code.
USER_DIR = .

VERSION = -std=c++17
CXX = g++

# Flags passed to the preprocessor.
# We have no idea here whether pthreads is available in the system, so disable its use.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -I$(GTEST_DIR)/include -DGTEST_HAS_PTHREAD=0

# Where to find gtest_main.cc.
GTEST_MAIN_CC = $(GTEST_DIR)/gtest_main.cc

# Flags passed to the C++ compiler.
CXXFLAGS += -pedantic -Wall -Wextra $(VERSION)

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# name of file(s) that we are testing e.g. BST.cpp and BST.h
SRC = BST

UTILS = BST_utils

# a main program that runs with the Google Tests
UNITTEST = BST_unittest

# a main that produces a main executable without Google Tests
TEST_LLIST = test_BST

# House-keeping build targets.
all : $(UNITTEST)

check : all
	./$(UNITTEST)

run : all
	$(UNITTEST).exe

remove :
	rm -f $(UNITTEST) $(TEST_LLIST) *.o

clean :
	del $(UNITTEST).exe $(TEST_LLIST).exe *.o  /Q

test : $(TEST_LLIST)

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

$(SRC).o : $(USER_DIR)/$(SRC).cpp $(USER_DIR)/$(SRC).h
	$(CXX) $(CXXFLAGS) -c $(USER_DIR)/$(SRC).cpp

$(UTILS).o : $(USER_DIR)/$(UTILS).cpp $(USER_DIR)/$(UTILS).h
	$(CXX) $(CXXFLAGS) -c $(USER_DIR)/$(UTILS).cpp

$(UNITTEST).o : $(USER_DIR)/$(UNITTEST).cpp  \
                  $(USER_DIR)/$(SRC).h \
                  $(USER_DIR)/$(UTILS).h \
                  $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/$(UNITTEST).cpp

$(UNITTEST) : $(SRC).o $(UTILS).o $(UNITTEST).o gtest-all.o gtest_main.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

$(TEST_LLIST).o : $(USER_DIR)/$(TEST_LLIST).cpp  \
                  $(USER_DIR)/$(SRC).h \
                  $(USER_DIR)/$(UTILS).h 
	$(CXX) $(CXXFLAGS) -c $(USER_DIR)/$(TEST_LLIST).cpp

$(TEST_LLIST): $(SRC).o $(UTILS).o $(TEST_LLIST).o
	$(CXX) $(CXXFLAGS) $^ -o $@
